{
    "AWSTemplateFormatVersion": "2010-09-09",
   "Outputs": {
        "BastionSecurityGroup": {
            "Description": "Bastion Security Group",
            "Value": {
                "Ref": "BastionSecurityGroup"
            }
        }
   },
    "Conditions": {
        "LinuxCheck": {
            "Fn::Equals": [
                {
                    "Ref": "OSType"
                },
                "Linux"
            ]
        },
        "WindowsCheck": {
            "Fn::Equals": [
                {
                    "Ref": "OSType"
                },
                "Windows"
            ]
        }
    },
    "Description": "AWS CloudFormation for creating a bastion host for Linux or Windows. ",
    "Parameters": {
        "BastionHostAMIID": {
            "Default": "",
            "Description": "AMI ID to use for SSH/RDP Gateway needs to be HVM based (Supply RETS Linux or Windows AMI for SSH/RDP use)",
            "Type": "String"
        },
        "BastionInstanceType": {
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "m3.medium"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type.",
            "Default": "t2.small",
            "Description": "Remote Desktop or SSH/RDP Gateway EC2 instance type (allows remote access to servers in private subnets)",
            "Type": "String"
        },
        "BillingIDTag": {
            "Default": "",
            "Description": "Enter the Billing ID Tag for this account",
            "Type": "String"
        },
        "EnvironmentTag": {
            "Default": "",
            "Description": "Enter the Environment Tag for this account",
            "Type": "String"
        },
        "KeyName": {
            "Default": "",
            "Description": "Enter KeyPair name to use to build the bastion host instance",
            "Type": "String"
        },
        "OSType": {
            "AllowedValues": [
                "Windows",
                "Linux"
            ],
            "Default": "Linux",
            "Description": "Specify the OS for this build, Windows or Linux ",
            "Type": "String"
        },
        "OwnerTag": {
            "Default": "",
            "Description": "Enter the Owner Tag for this account",
            "Type": "String"
        },
        "ProductTag": {
            "Default": "",
            "Description": "Enter the Product Tag for this account (e.g., gsmobile, hesi, fcmobile...)",
            "Type": "String"
        },
        "PublicSubnet1": {
            "Default": "",
            "Description": "Enter ID for the Public Subnet 1 from VPC creation to build the instance in (e.g. subnet-xxxxxxxx)",
            "Type": "String"
        },
        "BastionSecurityGroup": {
            "Default": "",
            "Description": "The Bastion host security group",
            "Type": "String"
        },
        "VPCID": {
            "Default": "",
            "Description": "Enter the VPC ID of the VPC to build in (e.g. vpc-xxxxxxxx)",
            "Type": "String"
        }
    },
    "Resources": {
        "BastionHostLinux": {
            "Condition": "LinuxCheck",
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeSize": "8"
                        }
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "BastionRoleProfile"
                },
                "ImageId": {
                    "Ref": "BastionHostAMIID"
                },
                "InstanceType": {
                    "Ref": "BastionInstanceType"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "BastionSecurityGroup"
                    }
                ],
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "VPC Bastion Gateway - Linux"
                    },
                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "OwnerTag"
                        }
                    },
                    {
                        "Key": "BillingID",
                        "Value": {
                            "Ref": "BillingIDTag"
                        }
                    },
                    {
                        "Key": "Environment",
                        "Value": {
                            "Ref": "EnvironmentTag"
                        }
                    },
                    {
                        "Key": "Product",
                        "Value": {
                            "Ref": "ProductTag"
                        }
                    }
                ]
            },
            "Type": "AWS::EC2::Instance"
        },
        "BastionHostWindows": {
            "Condition": "WindowsCheck",
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeSize": "50"
                        }
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "BastionRoleProfile"
                },
                "ImageId": {
                    "Ref": "BastionHostAMIID"
                },
                "InstanceType": {
                    "Ref": "BastionInstanceType"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "BastionSecurityGroup"
                    }
                ],
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "VPC Bastion Gateway - Windows"
                    },
                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "OwnerTag"
                        }
                    },
                    {
                        "Key": "BillingID",
                        "Value": {
                            "Ref": "BillingIDTag"
                        }
                    },
                    {
                        "Key": "Environment",
                        "Value": {
                            "Ref": "EnvironmentTag"
                        }
                    },
                    {
                        "Key": "Product",
                        "Value": {
                            "Ref": "ProductTag"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                " <script>",
                                "\n",
                                "  reg add hklm\\software\\microsoft\\Windows\\CurrentVersion\\Policies\\System /v ConsentPromptBehaviorAdmin /t REG_DWORD /d 0 /f",
                                "\n",
                                "  C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe Set-ExecutionPolicy Unrestricted -Force",
                                "\n",
                                "  IF NOT EXIST c:\\config MD C:\\config",
                                "\n",
                                "  netsh Advfirewall firewall delete rule name=All_ICMP_V4 protocol=icmpv4:any,any dir=in",
                                "\n",
                                "  netsh advfirewall firewall add rule name=All_ICMP_V4 protocol=icmpv4:any,any dir=in action=allow",
                                "\n",
                                "  SETX ZABBIX zabbix.ptgels.com /M",
                                "\n",
                                "  SETX ZABBIXGROUP ",
                                {
                                    "Ref": "ProductTag"
                                },
                                " /M",
                                "\n",
                                "  SETX BUILDENV ",
                                {
                                    "Ref": "ProductTag"
                                },
                                " /M",
                                "\n",
                                "  SETX BUILDBUCKET ptg-windows/build_scripts /M",
                                "\n",
                                "  SETX COMPANYID 02010303090208000a06020700 /M",
                                "\n",
                                "  SETX ZABBIXTEMPLATE Template_Windows_Services /M",
                                "\n",
                                "  IF NOT EXIST c:\\config MD C:\\config",
                                "\n",
                                "</script>",
                                "\n",
                                "<powershell>",
                                "\n",
                                "  $client = new-object System.Net.WebClient",
                                "\n",
                                "  $metaurl = 'http://169.254.169.254/latest/meta-data/instance-id'",
                                "\n",
                                "  $InstanceID = $client.DownloadString($metaurl)",
                                "\n",
                                "  $metaurl3 = 'http://169.254.169.254/latest/meta-data/placement/availability-zone'",
                                "\n",
                                "  $AvailabilityZone = $client.DownloadString($metaurl3)",
                                "\n",
                                "  setx AvailabilityZone $AvailabilityZone /M",
                                "\n",
                                "  setx InstanceID $InstanceID /M",
                                "\n",
                                "  setx prompt [$InstanceID]'$S$P$G' /M",
                                "\n",
                                "  $ComputerName = (get-item env:COMPUTERNAME).value",
                                "\n",
                                "  $xml = New-Object XML",
                                "\n",
                                "  $xml.Load('c:\\program files\\amazon\\Ec2ConfigService\\Settings\\config.xml')",
                                "\n",
                                "  $xml.Ec2ConfigurationSettings.Plugins.Plugin | where { $_.name -eq 'Ec2HandleUserData' } | foreach {$_.State = 'Enabled'}",
                                "\n",
                                "  $xml.Ec2ConfigurationSettings.Plugins.Plugin | where { $_.name -eq 'Ec2SetComputerName' } | foreach {$_.State = 'Disabled'}",
                                "\n",
                                "  $xml.Save('c:\\program files\\amazon\\Ec2ConfigService\\Settings\\config.xml') ",
                                "\n",
                                "  if ($InstanceID.ToLower() -ne $computername.ToLower())",
                                "\n",
                                "  { netdom renamecomputer $ComputerName /Newname $InstanceID  /Force ; shutdown /r /t 5 ; exit}",
                                "\n",
                                "  $uri2 = 'https://ptg-windows.s3.amazonaws.com/configure_host.ps1'",
                                "\n",
                                "  $targetname2 = 'c:\\Windows\\System32\\GroupPolicy\\Machine\\Scripts\\Startup\\configure_host.ps1'",
                                "\n",
                                "  $client.DownloadFile($uri2, $targetname2)",
                                "\n",
                                "  $PythonDir = 'c:\\python26\\Lib\\'",
                                "\n",
                                "  #Set path to the latest W2K8_Config EXE that will install on the server",
                                "\n",
                                "  $uri = 'https://ptg-windows.s3.amazonaws.com/AWS_W2K8_Config.exe'",
                                "\n",
                                "  $targetname = 'C:\\config\\AWS_W2K8_Config.exe' ",
                                "\n",
                                "  if (!(Test-Path -path $PythonDir))",
                                "\n",
                                "    { & cmd.exe /c reg add hklm\\software\\microsoft\\Windows\\CurrentVersion\\Policies\\System /v legalnoticecaption /t REG_SZ /f",
                                "\n",
                                "      & cmd.exe /c reg add hklm\\software\\microsoft\\Windows\\CurrentVersion\\Policies\\System /v legalnoticetext /t REG_SZ /f",
                                "\n",
                                "      $client.DownloadFile($uri, $targetname)",
                                "\n",
                                "      if ( Test-Path $targetname ) { & cmd.exe /c $targetname /silent } }",
                                "\n",
                                "  else { if (Test-Path $targetname) { Remove-Item $targetname } } ",
                                "\n",
                                "</powershell>",
                                "\n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "BastionRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "ec2:describe*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName": "BastionRole"
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        },
        "BastionRoleProfile": {
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "BastionRole"
                    }
                ]
            },
            "Type": "AWS::IAM::InstanceProfile"
        },
        "RDPSSHIPAddress": {
            "Properties": {
                "Domain": "vpc",
                "InstanceId": {
                    "Fn::If": [
                        "LinuxCheck",
                        {
                            "Ref": "BastionHostLinux"
                        },
                        {
                            "Ref": "BastionHostWindows"
                        }
                    ]
                }
            },
            "Type": "AWS::EC2::EIP"
        }
    }
}